using MongoDB.Bson;
using PersistenceFramework.Contract;
using PersistenceFramework.Exceptions;
using PersistenceFramework.Util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace PersistenceFramework.Mock.NoSQL.MongoDb
{
    public class MockMongoDbContext : IDbContext<ObjectId>
    {
        private bool AutogenerateId { get; set; }

        public MockMongoDbContext(bool autogeneratedId = true)
        {
            AutogenerateId = autogeneratedId;
        }

        public void Add<TEntity>(TEntity entity)
            where TEntity : class
        {
            ICollection<TEntity> entityCollection = (ICollection<TEntity>)GetCollection(typeof(TEntity));
            if (AutogenerateId)
                entity.GetType().GetProperty("Id").SetValue(entity, ObjectId.GenerateNewId());
            entityCollection.Add(entity);
        }

        public IEnumerable<TEntity> GetEntity<TEntity>(Expression<Func<TEntity, bool>> cond)
            where TEntity : class 
        {
            IEnumerable<TEntity> entityCollection = (IEnumerable<TEntity>)GetList(typeof(TEntity));
            return entityCollection?.Where(cond.Compile());
        }

        protected IEnumerable<object> GetList(Type type)
        {
            Type DbContextType = this.GetType();
            foreach (PropertyInfo propertyInfo in DbContextType.GetProperties(BindingFlags.NonPublic | BindingFlags.Instance))
            {
                if (propertyInfo.PropertyType.GetInterface(typeof(IEnumerable<>).Name) != null && propertyInfo.Name == type.Name)
                    return (IEnumerable<object>)propertyInfo.GetValue(this);
            }
            throw new NotDeclaredEntityException($"{type.Name} are not declare in context as ICollection<{type.Name}>",
                new Exception("You most declare the entity as private ICollection<> property"));
        }

        protected object GetCollection(Type type)
        {
            Type DbContextType = this.GetType();
            foreach (PropertyInfo propertyInfo in DbContextType.GetProperties(BindingFlags.NonPublic | BindingFlags.Instance))
            {
                if (propertyInfo.PropertyType.Name == typeof(ICollection<>).Name && propertyInfo.Name == type.Name)
                    return propertyInfo.GetValue(this);
            }
            throw new NotDeclaredEntityException($"{type.Name} are not declare in context as ICollection<{type.Name}>",
                new Exception("You most declare the entity as private ICollection<> property"));
        }

        protected void UpdateCollection(Type type, object collection)
        {
            PropertyInfo prop = this.GetType().GetProperty(type.Name, BindingFlags.NonPublic | BindingFlags.Instance);
            prop.SetValue(this, collection);
        }

        public void Update<TEntity>(TEntity entity)
            where TEntity : class
        {
            ICollection<TEntity> collection = (ICollection<TEntity>)GetCollection(typeof(TEntity));
            List<TEntity> nCollection = new List<TEntity>();

            foreach (var _entity in collection)
            {
                if (_entity.GetType().GetProperty("Id").GetValue(_entity).Equals(entity.GetType().GetProperty("Id").GetValue(entity)))
                    continue;
                nCollection.Add(_entity);
            }
            nCollection.Add(entity);
            UpdateCollection(typeof(TEntity), nCollection);
        }

        void IDbContext<ObjectId>.Remove<TEntity>(TEntity entity)
        {
            ICollection<TEntity> collection = (ICollection<TEntity>)GetCollection(typeof(TEntity));
            TEntity entityStored = collection.Where(DynamicLambdaBuilder.GetIdLE(entity).Compile()).SingleOrDefault();
            collection.Remove(entityStored);
        }
    }
}
